<?php

/**
 * @file
 * Flag module install/schema/update hooks.
 */

/**
 * Implements hook_schema().
 */
function flag_schema() {
  $schema = array();

  $schema['flag_counts'] = array(
    'description' => 'The number of times an item has been flagged.',
    'fields' => array(
      'fid' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'The flag type, usually one of "node", "comment", "user".',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The unique ID of the content, usually either the {cid}, {uid}, or {nid}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'count' => array(
        'description' => 'The number of times this object has been flagged for this flag.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'last_updated' => array(
        'description' => 'The UNIX time stamp representing when the flag was last updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-size' => 11,
      )
    ),
    'primary key' => array('fid', 'entity_id'),
    'indexes' => array(
      'fid_entity_type' => array('fid', 'entity_type'),
      'entity_type_entity_id' => array('entity_type', 'entity_id'),
      'fid_count' => array('fid', 'count'),
      'fid_last_updated' => array('fid', 'last_updated'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function flag_uninstall() {
  drupal_set_message(t('Flag has been uninstalled.'));
}

/**
 * Implements hook_requirements().
 */
function flag_requirements($phase) {
  /*
  $requirements = array();

  if ($phase == 'runtime') {
    if (\Drupal::moduleHandler()->moduleExists('translation') && !\Drupal::moduleHandler()->moduleExists('translation_helpers')) {
      $requirements['flag_translation'] = array(
        'title' => t('Flag'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('To have the flag module work with translations, you need to install and enable the <a href="http://drupal.org/project/translation_helpers">Translation helpers</a> module.'),
        'value' => t('Translation helpers module not found.'),
      );
    }
    if (\Drupal::moduleHandler()->moduleExists('session_api')) {
      if (file_exists('./robots.txt')) {
        $flag_path = url('flag') . '/';
        // We don't use url() because this may return an absolute URL when
        // language negotiation is set to 'domain'.
        $flag_path = parse_url($flag_path, PHP_URL_PATH);
        $robots_string = 'Disallow: ' . $flag_path;
        $contents = file_get_contents('./robots.txt');
        if (strpos($contents, $robots_string) === FALSE) {
          $requirements['flag_robots'] = array(
            'title' => t('Flag robots.txt problem'),
            'severity' => REQUIREMENT_WARNING,
            'description' => t('Flag module may currently be used with anonymous users, however the robots.txt file does not exclude the "@flag-path" path, which may cause search engines to randomly flag and unflag content when they index the site. It is highly recommended to add "@robots-string" to your robots.txt file (located in the root of your Drupal installation).', array('@flag-path' => $flag_path, '@robots-string' => $robots_string)),
            'value' => t('Search engines flagging content'),
          );
        }
      }
    }
  }
  return $requirements;
  */
}
